package Lab1;

/**
 *
 * @author Ridwan
 */
public class WordList 
{
    private int listSize; //number of words
    private String words[];//refrence store of words
    private int capList; //capacity of list stored


    public WordList(int capacity)//empty wordlist zero words, postive
    {
        capList = capacity;
        words = new String[capacity];
        listSize = 0;
    }


    public WordList(String[] arrayOfWords)//store words from arrayofwords in the list
    {
        capList = arrayOfWords.length*2;
        words = new String[capList];
        listSize = 0;

        for(int i=0;i<arrayOfWords.length;i++)
            insert(arrayOfWords[i]); //calls insert function to add words into list
    }



public int getSize()
    {
        return listSize;
    }

    public int getCapacity()
    {
        return capList;
    }


    public String getWordAt(int i) throws ArrayIndexOutOfBoundsException
    {
        if(i>=0 && i<listSize)
            return words[i];
        else
           throw new ArrayIndexOutOfBoundsException("Invalid Input");
    }

    public int find(String word)//lec binary serach
    {
        int low=0;
        int high = listSize-1;
        int  key;

        while(low<=high)
        {
            key = (low+high)/2;

            if(word.compareTo(words[key]) == 0 )     //returns the position if words match    
                return key;
            else if(word.compareTo(words[key]) >0)
                low=key+1;
            else if(word.compareTo(words[key]) < 0)
                high =key-1;   
        }

        return -1; //when low is greater than high then there is no word in the list

    }

    public void remove(String word)
    {
        int index = this.find(word); //gets the location of the word
        int i;
        if(index==-1)
            System.out.println("Word was not found.");
        else
        {
            for(i=index;i<listSize;i++) //shifts words to the left
                words[i] = words[i+1];
            listSize--;
        }
    }

    public void insert(String newword)
    {
for (int i = 0; i < listSize; i++)
        {
            for (int j = i+1; j < listSize; j++)
            {
                if (words[i].compareTo(words[j]) > 0) //sorts words in alphabetical order (lexigraphical)
                {
                    String temp1 = words[j]; //store temporary reference, aplhabitic
                    words[j] = words[i];
                    words[i] = temp1;
                }
            }
        }

        for(int i=0;i<words.length;i++)
            if(newword.equals(words[i])==true) //if the new word is the same as a word in the list then nothing happens
                return;
        
        
        if(listSize==capList) //if the list isnt big enough to add anohter word
    {
        capList = capList*2; 
        String[] temp = new String[capList]; //bigger list is created, doubled the size

        for(int i=0;i<words.length;i++)
            temp[i] = words[i]; //all words are stored in a temporary variable 

        words = new String[capList]; //empty list is created


        for(int i=0;i<capList;i++)
            words[i] = temp[i]; //contents are copied

        words[listSize] = newword; //new word is added to end of list
        listSize++;//
    }
    else
    {
        words[listSize] = newword; //new word is added to end of list
        listSize++;
    }


   
    for (int i = 0; i < listSize; i++)
        {
            for (int j = i+1; j < listSize; j++)
            {
                if (words[i].compareTo(words[j]) > 0) //sorts words in alphabetical order (lexigraphical)
                {
                    String temp1 = words[j];
                    words[j] = words[i];
                    words[i] = temp1;
                }
            }
        }
    }

    

     public WordList sublist(char init, char fin)
    {
        int low = 0;
        int high = this.listSize-1;
        int mid;
        
        while(low<=high)
         {
             mid = (low+high)/2;
             
             if(this.words[mid].charAt(0)>=init)
                 high = mid-1;
             else 
                 low = mid+1;      
         }
        System.out.println(low);
        if(this.listSize == 0)
        {
            WordList sub1 = new WordList(this.capList);
            return sub1;
        }

      int low2 = low; //sets the lower bound to the previous lower bound since the search should not look any lower
      int high2 = this.listSize-1;
      int mid2;
      
         while(low2<=high2)
         {
             mid2 = (low2+high2)/2;

             if(this.words[mid2].charAt(0)<=fin)
                 low2 = mid2+1;
             else
                 high2 = mid2-1;    
         }

        if((low2-low)==0)
        {
            WordList sub1 = new WordList(this.capList);
            return sub1;
        }
        WordList sub = new WordList((low2-low)*2); //new object is created

       for(int i=low;i<low2;i++)
           sub.insert(this.words[i]); //adds the words into new object

       return sub;
    }


    public String toString()
    {
        
    String list="";

    for(int i=0;i<listSize;i++)
        list = list + (words[i]+"\n");


      return list;
    }

     public int countInRange(char init, char fin)
     {
        int low = 0;
        int high = this.listSize-1;
        int mid;
        
        while(low<=high)
         {
             mid = (low+high)/2;
             
             if(this.words[mid].charAt(0)>=init)
                 high = mid-1;
             else 
                 low = mid+1;      
         }
        

      int low2 = low; //sets the lower bound to the previous
      int high2 = this.listSize-1;  //, the search should not look any lower than that
      int mid2;
      
         while(low2<=high2)
         {
             mid2 = (low2+high2)/2;

             if(this.words[mid2].charAt(0)<=fin)
                 low2 = mid2+1;
             else
                 high2 = mid2-1;    
         }

        return low2-low; //lower bounds will be the range OF Difference
     }}






}

